package com.conecel.asyncdatabase.service;

import org.springframework.amqp.core.AmqpTemplate;
import org.springframework.amqp.rabbit.annotation.RabbitListener;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.conecel.asyncdatabase.entity.Request;
import com.conecel.asyncdatabase.entityplay.CrSolicitude;
import com.conecel.asyncdatabase.repository.AsyncRepository;
import com.conecel.asyncdatabase.repository.AsyncRepositoryNPlay;
import com.google.gson.Gson;
import java.util.Date;
import java.util.UUID;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.ThreadContext;

@Service
@Transactional
public class AsyncService {
	
	@Autowired
	private AsyncRepository async;
	@Autowired
	private AsyncRepositoryNPlay asyncNPlay;
	@Autowired
	private AmqpTemplate rabbit;

	private static final Logger loggerAsyncDataBase = LogManager.getLogger(AsyncService.class.getName());

	@RabbitListener(queues = "queueAsyncDataBase")
	public void queueAsyncDataBase(String queue) {
		loggerAsyncDataBase.info("Inicio de la ejecucion queueAsyncDataBase.");
		
		try {
			String threadID = UUID.randomUUID().toString();
			ThreadContext.put("sid", threadID);
			
			loggerAsyncDataBase.info("Informacion recibida: " + queue);
			
			Gson gson = new Gson();
			
			Request response = new Request();
			CrSolicitude responsePlay = new CrSolicitude();
			
			
			if (queue.toUpperCase().contains("N-PLAY"))
			{
				loggerAsyncDataBase.info("Es una solicitud de N-PLAY.");
				
				responsePlay = gson.fromJson(queue, CrSolicitude.class);
				
				responsePlay.setModificationDate(new Date());
				
				loggerAsyncDataBase.info("Informacion a guardar: " + responsePlay);
				
				try {
					asyncNPlay.save(responsePlay);
					
					loggerAsyncDataBase.info("Se Guardo Exitosamente.");
				} catch (Exception ex) {
					loggerAsyncDataBase.error("Error al guardar en Base de Datos: " + ex.getMessage());
					
					rabbit.convertAndSend("queueAsyncDataBase-exchange", "queueAsyncDataBase-key", queue);
				}
			}
			else
			{
				loggerAsyncDataBase.info("No es una solicitud de N-PLAY.");
				
				response = gson.fromJson(queue, Request.class);
				
				response.setModificationDate(new Date());
				
				loggerAsyncDataBase.info("Informacion a guardar: " + response);
				
				try {
					async.save(response);
					
					loggerAsyncDataBase.info("Se Guardo Exitosamente.");
				} catch (Exception ex) {
					loggerAsyncDataBase.error("Error al guardar en Base de Datos: " + ex.getMessage());
					
					rabbit.convertAndSend("queueAsyncDataBase-exchange", "queueAsyncDataBase-key", queue);
				}
			}
		} catch (Exception e) {
			loggerAsyncDataBase.info("Error: " + e.getMessage());
			rabbit.convertAndSend("queueAsyncDataBase-exchange", "queueAsyncDataBase-key", queue);
		}
	}
}
