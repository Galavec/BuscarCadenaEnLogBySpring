package com.conecel.creditrecharge.service;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.UUID;
import java.util.concurrent.TimeUnit;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.logging.log4j.ThreadContext;
import org.springframework.amqp.rabbit.annotation.RabbitListener;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.conecel.creditrecharge.bean.BussinessRest;
import com.conecel.creditrecharge.bean.Util;

import com.conecel.creditrecharge.entity.Cr_myreglas;
import com.conecel.creditrecharge.entity.Cr_procesos_nivel_crediticio;
import com.conecel.creditrecharge.entity.CreditEngine;
import com.conecel.creditrecharge.entity.CreditLevel;
import com.conecel.creditrecharge.entity.CreditLevelResponse;
import com.conecel.creditrecharge.entity.Identify;
import com.conecel.creditrecharge.entity.Quota;
import com.conecel.creditrecharge.entity.Request;
import com.conecel.creditrecharge.entity.Result;
import com.conecel.creditrecharge.queue.RabbitQueue;
import com.conecel.creditrecharge.repository.ParametrosMongoBD;
import com.conecel.creditrecharge.service.business.CacheRedis;
import com.conecel.creditrecharge.service.business.DenyBlackList;
import com.conecel.creditrecharge.service.business.PrequalifiedQuota;
import com.conecel.creditrecharge.service.business.ValidationMotorCreditoNEW;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.google.gson.reflect.TypeToken;

@Service
public class CreditReChargeService {

	private static final Log loggerService = LogFactory.getLog(CreditReChargeService.class);
	private String msgProcessInit = "Procesando solicitud";
	private String msgProcessEnd = "Solicitud procesada en :";
	private String msgProcessEndMs = " milisegundos.";

	@Autowired
	RabbitQueue rabbitqueue;
	@Autowired
	private ValidationMotorCreditoNEW validationMotorcredito;
	@Autowired
	private DenyBlackList denyBlackList;
	@Autowired
	private PrequalifiedQuota prequalifiedquota;
	@Autowired
	private CacheRedis cachemanager;
	@Autowired
	private Util util;
	@Autowired
	BussinessRest bussinessRest;
	@Autowired
	ParametrosMongoBD parametrosMongoBD;
	
	@Autowired
	ValidacionAsincronica va;

	long startTime;
	long endTime;
	
	public CreditLevelResponse multiQueue(Request queues) {
		loggerService.info("- Inicio del MicroServicio CreditReCharge de Nivel Crediticio -");

		startTime = System.currentTimeMillis();
		Double totalRequestRisk = 0.0;
		String levelRisk;
		
		Gson gson = new Gson();
		
		String RequestQueues = gson.toJson(queues);
		loggerService.info("Request que llega: " + RequestQueues);
		
		Quota quota = new Quota();
		CreditLevel creditlevel = new CreditLevel();
		CreditLevelResponse response = new CreditLevelResponse();
		
		try {
			queues.setMsaServiceSave("Recharge");
			String threadID=UUID.randomUUID().toString();
			ThreadContext.put("sid", threadID);
			
			loggerService.info("msgProcessInit: " + msgProcessInit);

			totalRequestRisk = queues.getTotalRequestRisk(); 
			
			String bussiness = queues.getTransactionType();
			loggerService.info("bussiness: " + bussiness);
			
			Identify identify = new Identify();
			identify.setIdentificationType(queues.getIdentificationType()); //TIPO DE IDENTIFICACION
			identify.setIdentificationNumber(queues.getIdentificationNumber()); //NUMERO DE IDENTIFICACION
			
			String metodoPago =queues.getPaymentMethodType();
			String serviceNumber = queues.getServiceNumber();
			
			List<CreditEngine> blacklistTest = queues.getCreditEngine();
			
			String messageBlackList = denyBlackList.validateCreditEngine(blacklistTest);
			
			//DECLARACION DE BANDERA PARA EL ENVIO DE LAS COLAS A RABBIT
			boolean sendqueue = false;
			boolean sendQueuetray = false;
			
			Cr_myreglas responseMotorCredito = new Cr_myreglas();
			
			// ------------------------------------------------------------------------------------------
			List<CreditLevel> listNivelCred = new ArrayList<>();
			
			List<Cr_procesos_nivel_crediticio> procesosNivel = cachemanager.QueryCreditlevel(bussiness);
			loggerService.info("Tamanio de la lista: " + procesosNivel.size());

			if (procesosNivel.isEmpty()) {
				loggerService.warn("--- NO DISPONE DE NIVELES DE PROCESOS ---");
			}else {
				responseMotorCredito = validationMotorcredito.validar(queues);
				try {
					List<CreditLevel> jsLis = queues.getApprovals();
					
					Type type = new TypeToken<List<CreditLevel>>() {
					}.getType();
					
					listNivelCred = gson.fromJson(jsLis.toString(), type);
				} catch (Exception e) {
					loggerService.warn("--- NO TIENE APPROVALS ---");
				}
			}
			
			loggerService.info("Inicio de validacion por Proceso.");
			for (Cr_procesos_nivel_crediticio procesos : procesosNivel) {
				loggerService.info("Proceso: " + procesos.getProcesos());
				
				creditlevel = new CreditLevel();

				if (procesos.getProcesos().equals("CUPOPRECALIFICADO")&& util.validarIngreso(procesos.getProcesos(), listNivelCred)) {
					creditlevel.setTypelevel(procesos.getProcesos());
					creditlevel.setStartDateApproval(new Date());
					
					if (queues.getQuota()!=null) {
						quota = queues.getQuota();
						loggerService.info("Existe Quota: " + quota);
					}else {
						quota.setQuota("0");
						loggerService.info("No existe Quota: " + quota);
					}
							
					if (queues.getLevelRisk()!=null) {
						levelRisk = queues.getLevelRisk();
						loggerService.info("Tiene LEVERISK: " + levelRisk);
					}else {
						loggerService.warn("--- NO TIENE LEVELRISK VALOR POR DEFECTO ---"); 
						loggerService.warn("--- Se setea valor de LEVELRISK como ALTO ---");
						
						levelRisk = "ALTO";
						loggerService.info("levelRisk: " + levelRisk);
					}
					
					Result respuest = prequalifiedquota.quotaEvaluation(quota, levelRisk, responseMotorCredito,
							bussiness, procesos.getProcesos(), procesos.getId_nivel_crediticio(), serviceNumber,
							totalRequestRisk);
					
					try {
						if (respuest.getCupo() < 0) {
							quota.setQuota("0.0");
						}
						else
						{
							quota.setQuota(String.valueOf(respuest.getCupo()));
						}
						
						loggerService.info("Quota: " + quota.getQuota());
						
						queues.setQuota(quota);
						queues.setLevelRisk(respuest.getRiesgoCupo());
							
					} catch (Exception e) {
						loggerService.error("ERROR: " + e.getStackTrace());
						loggerService.error(e.getMessage());
					}

					if (respuest.getRespcrm().equals("APROBADO")&&quota.getQuotaState().equalsIgnoreCase("A")) {
						loggerService.info("Aprobado.");
						
						response.setRequestId(queues.getRequestId());
						response.setCode("0");
						response.setDelayActivation("N");
						response.setDepositAmount("0");
						response.setMessageDescription("APROBADO por cupo precalificado - " + respuest.getDescripcion());
						
						sendqueue = true;
						
						creditlevel.setRequestId(queues.getRequestId());
						creditlevel.setEntry("S");
						creditlevel.setCode(response.getCode());
						creditlevel.setDescriptionApproval(response.getMessageDescription());
						creditlevel.setIdRuler(respuest.getIdregla());
						creditlevel.setEndDateApproval(new Date());
						listNivelCred.add(creditlevel);
						
						break;
					} else if (respuest.getRespcrm().equals("NEGADO")) {
						loggerService.info("Negado.");
						
						response.setRequestId(queues.getRequestId());
						response.setCode("-1");
						response.setDelayActivation("N");
						response.setDepositAmount("0");
						response.setMessageDescription("NEGADO por cupo precalificado - " + respuest.getDescripcion());
						
						sendqueue = true;
						
						creditlevel.setRequestId(queues.getRequestId());
						creditlevel.setEntry("S");
						creditlevel.setCode(response.getCode());
						creditlevel.setDescriptionApproval(util.nvl(respuest.getDescripcion(), response.getMessageDescription()));
						creditlevel.setIdRuler(respuest.getIdregla());
						creditlevel.setEndDateApproval(new Date());
						listNivelCred.add(creditlevel);
						
						break;
					} else if (!quota.getQuotaState().equalsIgnoreCase("A")) {
						loggerService.info("Negado.");
						
						response.setRequestId(queues.getRequestId());
						response.setCode("-1");
						response.setDelayActivation("N");
						response.setDepositAmount("0");
						response.setMessageDescription("NEGADO por estado de cupo: "+ quota.getQuotaState()+" - " + respuest.getDescripcion());
						
						sendqueue = true;
						
						creditlevel.setRequestId(queues.getRequestId());
						creditlevel.setEntry("S");
						creditlevel.setCode(response.getCode());
						creditlevel.setDescriptionApproval(util.nvl(respuest.getDescripcion(), response.getMessageDescription()));
						creditlevel.setIdRuler(respuest.getIdregla());
						creditlevel.setEndDateApproval(new Date());
						listNivelCred.add(creditlevel);
						
						break;
					}
				}
				
				//break;
			}
			
			loggerService.info("Fin de validacion por Proceso.");

			if (response.getCode() == null) {
				loggerService.info("El codigo del response es NULL, no ingreso a ningun nivel crediticio.");
				
				response = new CreditLevelResponse();
				response.setRequestId(queues.getRequestId());
				response.setCode("-1");
				response.setDelayActivation("N");
				response.setDepositAmount("0");
				response.setMessageDescription("No ingreso a ningun nivel crediticio");
				queues.setResponseCode(Integer.parseInt(response.getCode()));
				queues.setMessageDescription(response.getMessageDescription());
				queues.setDelayActivation(response.getDelayActivation());
				queues.setDepositAmount(Double.valueOf(response.getDepositAmount()));
				
				loggerService.info("Response: " + response.toString());
			} else {
				try {
					queues.setApprovals(listNivelCred);
					queues.setResponseCode(Integer.parseInt(response.getCode()));
					queues.setMessageDescription(response.getMessageDescription());
					queues.setDelayActivation(response.getDelayActivation());
					queues.setDepositAmount(Double.valueOf(response.getDepositAmount()));
				} catch (Exception e) {
					loggerService.error("Error: " + e.getStackTrace());
					loggerService.error(e.getMessage());
				}
				
				loggerService.info("messageBlackList: " + messageBlackList);
				
				if (messageBlackList != null) {
					loggerService.info("Inicio de validacion cuando messageBlackList no es NULL.");
					
					response = new CreditLevelResponse();
					
					if (messageBlackList.equals("La solicitud ha sido negada por Lista Negra")) {
						response.setCode("1");
					} else {
						response.setCode("-1");
					}
					
					response.setRequestId(queues.getRequestId());
					response.setDelayActivation("N");
					response.setDepositAmount("0");
					response.setMessageDescription(messageBlackList);
					
					queues.setResponseCode(Integer.parseInt(response.getCode()));
					queues.setMessageDescription(response.getMessageDescription());
					queues.setDelayActivation(response.getDelayActivation());
					queues.setDepositAmount(Double.valueOf(response.getDepositAmount()));
					
					creditlevel.setRequestId(queues.getRequestId());
					creditlevel.setTypelevel("Validacion Motor Credito");
					creditlevel.setEntry("S");
					creditlevel.setCode(response.getCode());
					creditlevel.setDescriptionApproval(response.getMessageDescription());
					creditlevel.setEndDateApproval(new Date());
					
					listNivelCred.add(creditlevel);
					
					sendqueue = true;
					
					queues.setApprovals(listNivelCred);
					
					loggerService.info("Validacion BlackList: " + response.toString());
					loggerService.info("Fin de validacion cuando messageBlackList no es NULL.");
				}
				
				//FUNCION ASINCRONICO
				va.Validaciones( sendqueue, metodoPago,  sendQueuetray, queues,response, quota,  identify );
			}
		} catch (Exception e) {
			loggerService.error("Se Ejecuto Erroneamente el MicroServicio CreditReCharge de Nivel Crediticio.");
			loggerService.error("ERROR" + e.getMessage());
		}
		
		loggerService.info("Respuesta Final de CreditReCharge: " + response);
		
		loggerService.info("- Fin del MicroServicio CreditReCharge de Nivel Crediticio -");
		
		endTime = System.currentTimeMillis() - startTime;
		loggerService.info(msgProcessEnd + endTime + msgProcessEndMs);
		
		return response;
	}
	
	
	
	@RabbitListener(queues = {"queueRecharge"})
	public void multiQueues(String queuesRecharge) {
		loggerService.info("- Inicio del MicroServicio CreditReCharge de Nivel Crediticio -");
		loggerService.info("Consumo por Rabbit.");
		
	    this.startTime = System.currentTimeMillis();
	    
	    String queues = queuesRecharge;
	    loggerService.info("Request que llega: " + queues);
	    
	    Double totalRequestRisk = Double.valueOf(0.0D);
	    String bussiness = "";
	    String metodoPago = "";
	    String serviceNumber = "";
	    Double totalAmount = 0.0;
	    
	    Quota quota = new Quota();
		Gson gson = new Gson();
		
		String levelRisk;
		
		Identify identify = new Identify();
	    CreditLevel creditlevel = new CreditLevel();
	    
	    try {
	    	JsonObject jsqueue = (JsonObject)(new Gson()).fromJson(queues, JsonObject.class);
	    	String threadID = UUID.randomUUID().toString();
	    	ThreadContext.put("sid", threadID);
	    	
	    	loggerService.info(this.msgProcessInit);
	    	
	    	try {
	    		bussiness = jsqueue.get("transactionType").getAsString();
	    		identify.setIdentificationType(jsqueue.get("identificationType").getAsString());
	    		identify.setIdentificationNumber(jsqueue.get("identificationNumber").getAsString());
	    		
	    		metodoPago = jsqueue.get("paymentMethodType").getAsString();
	    		serviceNumber = jsqueue.get("serviceNumber").getAsString();
	    		totalAmount = jsqueue.get("totalRequestRisk").getAsDouble();
	    		
	    		loggerService.info("bussiness: " + bussiness);
	    	} catch(Exception e) {
	    		loggerService.error("Error: " + e.getStackTrace());
	    		loggerService.error(e.getMessage());
	    	}
	    	
	    	JsonArray blacklistTest = jsqueue.get("creditEngine").getAsJsonArray();
	    	//JsonArray whiteListArray = jsqueue.get("whiteLists").getAsJsonArray();
			
	    	Type listType = new TypeToken<List<CreditEngine>>(){}.getType();
			List<CreditEngine> arrayDeJson = gson.fromJson(blacklistTest, listType);
			
			String messageBlackList = this.denyBlackList.validateCreditEngine(arrayDeJson);
			
			boolean sendqueue = false;
			
			Cr_myreglas responseMotorCredito = new Cr_myreglas();
			CreditLevelResponse response = new CreditLevelResponse();
			
			List<CreditLevel> listNivelCred = new ArrayList<CreditLevel>();
			List<Cr_procesos_nivel_crediticio> procesosNivel = this.cachemanager.QueryCreditlevel(bussiness);
			
			loggerService.info("Valor de la lista: " + procesosNivel.size());
			
			if (procesosNivel.isEmpty()) {
				loggerService.warn("- NO DISPONE DE NIVELES DE PROCESOS-");
			} else {
				Request ce = gson.fromJson(queues, Request.class);
				responseMotorCredito = this.validationMotorcredito.validar(ce);
				
				try {
					JsonArray jsLis = jsqueue.get("approvals").getAsJsonArray();
					
					Type type = new TypeToken<List<CreditLevel>>() {}.getType();
					listNivelCred =  gson.fromJson(jsLis.toString(), type);
				} catch (Exception e) {
					loggerService.warn("------ NO TIENE APPROVALS------");
				}
			}
			
			for (Cr_procesos_nivel_crediticio procesos : procesosNivel) {
				if (procesos.getProcesos().equals("CUPOPRECALIFICADO") 
	        		&& this.util.validarIngreso(procesos.getProcesos(), listNivelCred)) {
					creditlevel.setTypelevel(procesos.getProcesos());
					
					creditlevel.setStartDateApproval(new Date());
					
					if (jsqueue.has("quota")&&!jsqueue.get("quota").isJsonNull()) {
						quota = new Gson().fromJson(jsqueue.get("quota").getAsJsonObject(),Quota.class);
					} else {
						loggerService.info("No existe Quota.");
						quota.setQuota("0");
					}
				
				
				if (jsqueue.has("levelRisk")&&!jsqueue.get("levelRisk").isJsonNull()) {
					levelRisk = jsqueue.get("levelRisk").getAsString();
						  }else {
							  	levelRisk = "ALTO";
							  	loggerService.warn("------ NO TIENE LEVELRISK VALOR POR DEFECTO - LEVELRISK(ALTO) ------");
				}
			
	          
	          Result respuest = this.prequalifiedquota.quotaEvaluation(quota, levelRisk, responseMotorCredito, bussiness, procesos
	              .getProcesos(), procesos.getId_nivel_crediticio(), serviceNumber, totalRequestRisk);

	          
	          try {
	            if (respuest.getCupo() < 0.0D) {
	              
	              quota.setQuota("0.0");
	            } else {
	              quota.setQuota(String.valueOf(respuest.getCupo()));
	            } 
	            String jsonQuota = gson.toJson(quota);
	            JsonObject object = (JsonObject)gson.fromJson(queues, JsonObject.class);
	            JsonObject quotajson = (JsonObject)gson.fromJson(jsonQuota, JsonObject.class);
	            object.add("quota", quotajson);
	            object.addProperty("levelRisk", respuest.getRiesgoCupo());
	            queues = object.toString();
	          } catch (Exception e) {
	            loggerService.error("Error: " + e.getStackTrace());
	            loggerService.error(e.getMessage());
	          } 
	          
	          if (respuest.getRespcrm().equals("APROBADO") && quota.getQuotaState().equalsIgnoreCase("A")) {
	            loggerService.info("APROBADO");
	            response.setRequestId(jsqueue.get("requestId").getAsBigDecimal());
	            response.setCode("0");
	            response.setDelayActivation("N");
	            response.setDepositAmount("0");
	            response.setMessageDescription("Aprobado por cupo precalificado - " + respuest.getDescripcion());
	            sendqueue = true;
	            creditlevel.setEntry("S");
	            creditlevel.setCode(response.getCode());
	            creditlevel.setDescriptionApproval(response.getMessageDescription());
	            creditlevel.setIdRuler(respuest.getIdregla());
	            creditlevel.setEndDateApproval(new Date());
	            listNivelCred.add(creditlevel);
	          }
	          else if (respuest.getRespcrm().equals("NEGADO")) {
	            loggerService.info("NEGADO");
	            response.setRequestId(jsqueue.get("requestId").getAsBigDecimal());
	            response.setCode("-1");
	            response.setDelayActivation("N");
	            response.setDepositAmount("0");
	            response.setMessageDescription("Negado por cupo precalificado - " + respuest.getDescripcion());
	            sendqueue = true;
	            creditlevel.setEntry("S");
	            creditlevel.setCode(response.getCode());
	            creditlevel.setDescriptionApproval((String)this.util
	                .nvl(respuest.getDescripcion(), response.getMessageDescription()));
	            creditlevel.setIdRuler(respuest.getIdregla());
	            creditlevel.setEndDateApproval(new Date());
	            listNivelCred.add(creditlevel);
	            break;
	          } 
	          else if (!quota.getQuotaState().equalsIgnoreCase("A")) {
		            loggerService.info("NEGADO");
		            response.setRequestId(jsqueue.get("requestId").getAsBigDecimal());
		            response.setCode("-1");
		            response.setDelayActivation("N");
		            response.setDepositAmount("0");
		            response.setMessageDescription("Negado por estado de cupo - " + respuest.getDescripcion());
		            sendqueue = true;
		            creditlevel.setEntry("S");
		            creditlevel.setCode(response.getCode());
		            creditlevel.setDescriptionApproval((String)this.util
		                .nvl(respuest.getDescripcion(), response.getMessageDescription()));
		            creditlevel.setIdRuler(respuest.getIdregla());
		            creditlevel.setEndDateApproval(new Date());
		            listNivelCred.add(creditlevel);
		            break;
		          } 
	        }  }


	    
	      
	      if (response.getCode() == null) {
	        response = new CreditLevelResponse();
	        response.setRequestId(jsqueue.get("requestId").getAsBigDecimal());
	        response.setCode("-1");
	        response.setDelayActivation("N");
	        response.setDepositAmount("0");
	        response.setMessageDescription("No ingreso a ningun nivel crediticio");
	        jsqueue.addProperty("responseCode", response.getCode());
	        jsqueue.addProperty("messageDescription", response.getMessageDescription());
	        jsqueue.addProperty("delayActivation", response.getDelayActivation());
	        jsqueue.addProperty("depositAmount", response.getDepositAmount());
	        queues = jsqueue.toString();
	        loggerService.info(response.toString());
	       
	          JsonObject jsResponse = (JsonObject)(new Gson()).fromJson((new Gson()).toJson(response), JsonObject.class);
	          this.rabbitqueue.creditResponseQueue(jsResponse.toString(), "queueRechargeResponse");
	        
	          
	          
	      } else {
	        
	        try {
	          
	          String gsonCredJsonArray = gson.toJson(listNivelCred);
	          JsonArray nivelCredJsonArray = (JsonArray)gson.fromJson(gsonCredJsonArray, JsonArray.class);
	          jsqueue.add("approvals", nivelCredJsonArray);
	          jsqueue.addProperty("responseCode", response.getCode());
	          jsqueue.addProperty("messageDescription", response.getMessageDescription());
	          jsqueue.addProperty("delayActivation", response.getDelayActivation());
	          jsqueue.addProperty("depositAmount", response.getDepositAmount());
	          queues = jsqueue.toString();
	        } catch (  Exception e ) {
	        
	          loggerService.error("Error: " + e.getStackTrace());
	          loggerService.error(e.getMessage());
	        }
	        
	        loggerService.info("messageBlackList: " + messageBlackList);
	        
	        if (messageBlackList != null) {
	        	loggerService.info("Inicio de validacion cuando messageBlackList no es NULL.");
				
				response = new CreditLevelResponse();
				
				if (messageBlackList.equals("La solicitud ha sido negada por Lista Negra")) {
					response.setCode("1");
				} else {
					response.setCode("-1");
				}
	          
	          response.setRequestId(jsqueue.get("requestId").getAsBigDecimal());
	          response.setDelayActivation("N");
	          response.setDepositAmount("0");
	          response.setMessageDescription(messageBlackList);
	          jsqueue.addProperty("responseCode", response.getCode());
	          jsqueue.addProperty("messageDescription", response.getMessageDescription());
	          jsqueue.addProperty("delayActivation", response.getDelayActivation());
	          jsqueue.addProperty("depositAmount", response.getDepositAmount());
	          creditlevel.setTypelevel("Validacion Motor Credito");
	          
	          creditlevel.setEntry("S");
	          creditlevel.setCode(response.getCode());
	          creditlevel.setDescriptionApproval(response.getMessageDescription());
	          creditlevel.setEndDateApproval(new Date());
	          listNivelCred.add(creditlevel);
	          String gsonCredJsonArray = (new Gson()).toJson(listNivelCred);
	          sendqueue = true;
	          JsonArray nivelCredJsonArray = (JsonArray)gson.fromJson(gsonCredJsonArray, JsonArray.class);
	          jsqueue.add("approvals", nivelCredJsonArray);
	          queues = jsqueue.toString();
	          loggerService.info("Validacion Black List" + response.toString());
	          loggerService.info(response.toString());
	        } 
	        if (sendqueue) {
	          if ((metodoPago.equals("BAN") || metodoPago.equals("TCR") || metodoPago.equals("CFA")) && response.getCode().equals("0")) {
					
					try {
						 JsonObject jsResponse = new Gson().fromJson(new Gson().toJson(response), JsonObject.class);
						 rabbitqueue.creditResponseQueue(jsResponse.toString(), "queueRechargeResponse");
						 loggerService.info(response.toString());
						 endTime=System.currentTimeMillis()-startTime;
						 loggerService.info(msgProcessEnd+endTime+msgProcessEndMs);
						 TimeUnit.MILLISECONDS.sleep(500);
						 
						 boolean save= parametrosMongoBD.saveCreditLevelResponse(response);
						 if(save) {
								loggerService.info("Guardado exitoso de la respuesta en Mongo");	 
						 }else {
								loggerService.info("Error al guardar la respuesta en Mongo");}
						 
					} catch (Exception e) {
						loggerService.error("Error:" + e.getMessage());
					}
					
					
					try {
						 totalRequestRisk = totalAmount;
						Double cupo = Double.valueOf(quota.getQuota());
						if (cupo < 0) {
							//cupo = cupo;
							identify.setValue(String.valueOf(cupo));
						}
						
						loggerService.info("El valor de cupo es: " + cupo);
						loggerService.info("El valor de totalRequestRisk es: " + totalRequestRisk);
						
						if ((cupo - totalRequestRisk) < 0) {
							identify.setValue(String.valueOf(cupo));
						} else {
							identify.setValue(String.valueOf(totalRequestRisk));
						}
						
						
						quota.setQuotaUsed(Float.parseFloat(identify.getValue()));
						jsqueue.get("quota").getAsJsonObject().addProperty("quotaUsed" ,identify.getValue());
						loggerService.info("El valor de quotaUsed es: " + quota.getQuotaUsed());
						
						queues = jsqueue.toString();
						
						loggerService.info("Envio a AsyncDataBase: " + queues);
						rabbitqueue.creditResponseQueue(queues, "queueAsyncDataBase");


						Integer respu =bussinessRest.reducircupo(identify);
						if (respu == 0) {
							
							loggerService.info("Se reducio el cupo");
							
							String que = gson.toJson(jsqueue);	
							Request port = gson.fromJson(que, Request.class);
							Integer responseCRM = bussinessRest.quotaUpdateCrm(port);
							if (responseCRM == 0) {
								loggerService.info("Se actualizo el cupo en CRM");
							} else {
								loggerService.info("No se actualizo el cupo en CRM");
							}
						} else {
						
							loggerService.info("No se pudo reducir el cupo");
						}
					} catch (Exception e) {
						loggerService.error("Error al reducir cupo:" + e.getMessage());
					}
					
				}else {
					JsonObject jsResponse = new Gson().fromJson(new Gson().toJson(response), JsonObject.class);
					 rabbitqueue.creditResponseQueue(jsResponse.toString(), "queueRechargeResponse");
					 loggerService.info(response.toString());
					 endTime=System.currentTimeMillis()-startTime;
					 loggerService.info(msgProcessEnd+endTime+msgProcessEndMs);
					 TimeUnit.MILLISECONDS.sleep(500);
					 
					loggerService.info("Envio a AsyncDataBase: " + queues);
					rabbitqueue.creditResponseQueue(queues, "queueAsyncDataBase");
	
				} 
	        }    
	      } 
	    } catch (Exception e) {
	      loggerService.error("Se Ejecuto Erroneamente el MicroServicio de Nivel Crediticio");
	      loggerService.error("Error: " + e.getMessage());
	    } 
	    loggerService.info("Fin del MicroServicio de Nivel Crediticio");
	    this.endTime = System.currentTimeMillis() - this.startTime;
	    loggerService.info(this.msgProcessEnd + this.endTime + this.msgProcessEndMs);
	  }
	  public void reliable(String queues) {
	    try {
	      CreditLevelResponse response = new CreditLevelResponse();
	      JsonObject queue = (JsonObject)(new Gson()).fromJson(queues, JsonObject.class);
	      response.setRequestId(queue.get("requestId").getAsBigDecimal());
	      response.setCode("-1");
	      response.setDelayActivation("N");
	      response.setDepositAmount("0");
	      response.setMessageDescription("Problemas con el Micro Servicio de CreditReChange");
	      JsonObject jsResponse = (JsonObject)(new Gson()).fromJson((new Gson()).toJson(response), JsonObject.class);
	      this.rabbitqueue.creditResponseQueue(jsResponse.toString(), "queueRechargeResponse");
	    } catch (Exception e) {
	      loggerService.error("Error: " + e.getStackTrace());
	      loggerService.error(e.getMessage());
	    } 
	  }
	
}
