package com.conecel.port5000.service;

import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.UUID;
import java.util.concurrent.TimeUnit;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.logging.log4j.ThreadContext;
import org.springframework.amqp.rabbit.annotation.RabbitListener;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.conecel.port5000.bean.BussinessRest;
import com.conecel.port5000.bean.Util;
import com.conecel.port5000.entity.Cr_myreglas;
import com.conecel.port5000.entity.Cr_procesos_nivel_crediticio;
import com.conecel.port5000.entity.CreditEngine;
import com.conecel.port5000.entity.CreditLevel;
import com.conecel.port5000.entity.CreditLevelResponse;
import com.conecel.port5000.entity.Identify;
import com.conecel.port5000.entity.Quota;
import com.conecel.port5000.entity.Request;
import com.conecel.port5000.entity.Result;
import com.conecel.port5000.queue.RabbitQueue;
import com.conecel.port5000.repository.ParametrosMongoBD;
import com.conecel.port5000.repository.ProcesosBuro;
import com.conecel.port5000.service.business.CacheRedis;
import com.conecel.port5000.service.business.DenyBlackList;
import com.conecel.port5000.service.business.PrequalifiedQuota;
import com.conecel.port5000.service.business.ValidationMotorCreditoNEW;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.reflect.TypeToken;

@Service
public class Port5000Service extends Thread {
	private static final Log loggerService = LogFactory.getLog(Port5000Service.class);
	
	private String msgProcessInit = "Procesando solicitud";
	private String msgProcessEnd = "Solicitud procesada en: ";
	private String msgProcessEndMs = " milisegundos.";

	@Autowired
	RabbitQueue rabbitqueue;
	@Autowired
	private ValidationMotorCreditoNEW validationMotorcredito;
	@Autowired
	private DenyBlackList denyBlackList;
	@Autowired
	private PrequalifiedQuota prequalifiedquota;
	@Autowired
	private CacheRedis cachemanager;
	@Autowired
	private Util util;
	@Autowired
	BussinessRest bussinessRest;
	@Autowired
	ParametrosMongoBD parametrosMongoBD;
	@Autowired
	ProcesosBuro procesosBuro;
	
	@Autowired(required=true)
	ValidacionAsincronico va;
	
	long startTime;
	long endTime;
	Double totalAmount = 0.0;
	
	public CreditLevelResponse Por5000(Request queue) {
		String threadID=UUID.randomUUID().toString();
		
        ThreadContext.put("sid", threadID);
        
        startTime=System.currentTimeMillis();
        
		String levelRisk = "";
		String bussiness = "";
		String MetodoPago = "";
		String serviceNumber = "";
		String messageBlackList = "";
		
		boolean sendqueue = true;
		
		Quota quota = new Quota();
		CreditLevel creditlevel = new CreditLevel();
		CreditLevelResponse response = new CreditLevelResponse();
		
		try {
			loggerService.info(msgProcessInit);
			loggerService.info("Inicio del MicroServicio Port5000 de Nivel Crediticio");
			
			/*SE CREA UN OBJETO JSON DE LO QUE SE RECIBE EN LA COLA DE RABBITMQ*/
			queue.setMsaServiceSave("port5000");
			
			Gson gson  = new Gson();
			
			String inf = gson.toJson(queue);
			
			loggerService.info(inf);
			
			totalAmount = queue.getTotalRequestRisk();
			
			/*SE OBTIENE EL NEGOCIO A CUAL SE REALIZARA LA TRANSACCION*/
			bussiness = queue.getTransactionType();
			
			Identify identify = new Identify();
			identify.setIdentificationType(queue.getIdentificationType()); //TIPO DE IDENTIFICACION
			identify.setIdentificationNumber(queue.getIdentificationNumber()); //NUMERO DE IDENTIFICACION
			
			MetodoPago = queue.getPaymentMethodType();
			serviceNumber = queue.getServiceNumber();
			
			List<CreditEngine>blacklistTest = queue.getCreditEngine();
			
			messageBlackList = denyBlackList.validateCreditEngine(blacklistTest);

			//DECLARACION DE BANDERA PARA EL ENVIO DE LAS COLAS A RABBIT
			sendqueue = false;
			
			Cr_myreglas responseMotorCredito = new Cr_myreglas();
			List<CreditLevel> listNivelCred = new ArrayList<CreditLevel>();
			
			List<Cr_procesos_nivel_crediticio> procesosNivel = cachemanager.QueryCreditlevel(bussiness);
			
			if (0 < procesosNivel.size()) {
				responseMotorCredito = validationMotorcredito.validar(queue);
				
				try {
					List<CreditLevel>jsLis= queue.getApprovals();
					
					Type type = new TypeToken<List<CreditLevel>>() {
					}.getType();
					
					listNivelCred = gson.fromJson(jsLis.toString(), type);
				} catch (Exception e) {
					loggerService.warn("No se pudo obtener el approvals.");
				}
			}
			
			for (Cr_procesos_nivel_crediticio procesos : procesosNivel) {
				System.out.println(procesos.getProcesos());
				
				creditlevel = new CreditLevel();
				
				if (procesos.getProcesos().equals("CUPOPRECALIFICADO")
						&& util.validarIngreso(procesos.getProcesos(), listNivelCred)) {
					creditlevel.setTypelevel(procesos.getProcesos());
					creditlevel.setStartDateApproval(new Date());
					
					if (queue.getQuota()!=null) {
						quota = queue.getQuota();
					}else {
						loggerService.info("No existe Quota.");
						
						quota.setQuota("0");
						quota.setQuotaState("I");
					}
					
					if (queue.getLevelRisk()!=null) {
						levelRisk = queue.getLevelRisk();
					}else {
						loggerService.warn("------ NO TIENE LEVELRISK VALOR POR DEFECTO - LEVELRISK(ALTO) ------");
						levelRisk = "ALTO";
					}
					
					Result respuest = prequalifiedquota.QuotaEvaluation(quota,levelRisk, responseMotorCredito, bussiness,
							procesos.getProcesos(), procesos.getId_nivel_crediticio(), serviceNumber, totalAmount);					
					
					try {
						if (respuest.getCupo() < 0) {
							quota.setQuota("0.0");
						} else {
							quota.setQuota(String.valueOf(respuest.getCupo()));	
						}
						
						queue.setQuota(quota);
						
						queue.setLevelRisk(respuest.getRiesgoCupo());
					} catch (Exception e) {
						loggerService.error("Error_1: "+ e.getMessage());
					}
					loggerService.info("Respuesta de evaluacion de reglas");
					loggerService.info(new Gson().toJson(respuest));
					loggerService.info("Estado de cupo");
					loggerService.info(new Gson().toJson(quota));
					if (respuest.getRespcrm().equals("APROBADO")&&quota.getQuotaState().equalsIgnoreCase("A")) {
						
						response.setRequestId(queue.getRequestId());
						response.setCode("0");
						response.setDelayActivation("N");
						response.setDepositAmount("0");
						response.setMessageDescription("Aprobado por cupo precalificado ");
						
						sendqueue = true;
						
						creditlevel.setRequestId(queue.getRequestId());
						creditlevel.setEntry("S");
						creditlevel.setCode(response.getCode());
						creditlevel.setDescriptionApproval(response.getMessageDescription());
						creditlevel.setIdRuler(respuest.getIdregla());
						creditlevel.setEndDateApproval(new Date());
						
						listNivelCred.add(creditlevel);
						
						break;
					} else if (respuest.getRespcrm().equals("NEGADO")) {
						response.setRequestId(queue.getRequestId());
						response.setCode("-1");
						response.setDelayActivation("N");
						response.setDepositAmount("0");
						response.setMessageDescription("Negado por cupo precalificado - cupo es menor al riesgo solicitado");
						response.setMessageDescription(response.getMessageDescription()+"- Estado de cupo: "+ quota.getQuotaState());
						sendqueue = true;

						creditlevel.setRequestId(queue.getRequestId());
						creditlevel.setEntry("S");
						creditlevel.setCode(response.getCode());
						creditlevel.setDescriptionApproval(util.nvl(respuest.getDescripcion(), response.getMessageDescription()));
						creditlevel.setIdRuler(respuest.getIdregla());
						creditlevel.setEndDateApproval(new Date());

						listNivelCred.add(creditlevel);
						break;
					}else if (!quota.getQuotaState().equalsIgnoreCase("A")) {
						response.setRequestId(queue.getRequestId());
						response.setCode("-1");
						response.setDelayActivation("N");
						response.setDepositAmount("0");
						response.setMessageDescription("Estado de cupo no activo, cupo en estado: "+quota.getQuotaState());
						sendqueue = true;

						creditlevel.setRequestId(queue.getRequestId());
						creditlevel.setEntry("S");
						creditlevel.setCode(response.getCode());
						creditlevel.setDescriptionApproval(util.nvl(respuest.getDescripcion(), response.getMessageDescription()));
						creditlevel.setIdRuler(respuest.getIdregla());
						creditlevel.setEndDateApproval(new Date());

						listNivelCred.add(creditlevel);
						break;
					}
				}
			}			

			if (response.getCode() == null) {
				response = new CreditLevelResponse();
				response.setRequestId(queue.getRequestId());
				response.setCode("-1");
				response.setDelayActivation("N");
				response.setDepositAmount("0");
				response.setMessageDescription("No ingreso a ningun nivel crediticio");
				
				queue.setResponseCode(Integer.parseInt(response.getCode()));
                queue.setMessageDescription(response.getMessageDescription());
                queue.setDelayActivation(response.getDelayActivation());
                queue.setDepositAmount(Double.valueOf(response.getDepositAmount()));
			} else {
				try {
					queue.setApprovals(listNivelCred);
					queue.setResponseCode(Integer.parseInt(response.getCode()));
					queue.setMessageDescription(response.getMessageDescription());
	                queue.setDelayActivation(response.getDelayActivation());
	                queue.setDepositAmount(Double.valueOf(response.getDepositAmount()));          
				} catch (Exception e) {
					loggerService.error("Error_2: "+ e.getMessage());
				}
				
				if (messageBlackList !=null) {
					loggerService.info("Inicio de validacion cuando messageBlackList no es NULL.");
					
					response = new CreditLevelResponse();
					
					if (messageBlackList.equals("La solicitud ha sido negada por Lista Negra")) {
						response.setCode("1");
					} else {
						response.setCode("-1");
					}
					
					response.setRequestId(queue.getRequestId());
					response.setDelayActivation("N");
					response.setDepositAmount("0");
					response.setMessageDescription(messageBlackList);
					queue.setResponseCode(Integer.parseInt(response.getCode()));
					queue.setMessageDescription(response.getMessageDescription());
	                queue.setDelayActivation(response.getDelayActivation());
	                queue.setDepositAmount(Double.valueOf(response.getDepositAmount())); 
           
					creditlevel.setRequestId(queue.getRequestId());
                    creditlevel.setTypelevel("Validacion Motor Credito");
                    creditlevel.setEntry("S");
                    creditlevel.setCode(response.getCode());
                    creditlevel.setDescriptionApproval(response.getMessageDescription());
                    creditlevel.setEndDateApproval(new Date());
                    
                    listNivelCred.add(creditlevel);
                    
                    sendqueue = true;
                    
                    queue.setApprovals(listNivelCred);
                    
                    loggerService.info("Fin de validacion cuando messageBlackList no es NULL.");
                    loggerService.info(response.toString());
				}
				
				va.ReducirCupo(sendqueue, MetodoPago, response,quota,queue, identify, totalAmount );
			}
		} catch (Exception e) {
			loggerService.error("Se Ejecuto Erroneamente el MicroServicio Port5000 de Nivel Crediticio: " + e.getMessage());
		}
		
		loggerService.info("Respuesta del MicroServicio Port5000 de Nivel Crediticio: " + response);
		loggerService.info("Fin del MicroServicio Port5000 de Nivel Crediticio");
		
		endTime=System.currentTimeMillis()-startTime;
		loggerService.info(msgProcessEnd+endTime+msgProcessEndMs);
		
		return response; 
	}
	
	
// ***************ESCUCHA RABBITMQ***********************	
	@RabbitListener(queues = "queuePort5000")	
	public void multiQueue(String queuesPort5000) {
		String threadID=UUID.randomUUID().toString();
		ThreadContext.put("sid", threadID);
		
		startTime=System.currentTimeMillis();
		
		String levelRisk = "";
		String queues = queuesPort5000;
		
		Quota quota = new Quota();
		CreditLevel creditlevel = new CreditLevel();
		
		try {
			JsonObject jsqueue = new Gson().fromJson(queues, JsonObject.class);

			/*SE CREA UN OBJETO DE JSON DE LO QUE RECIBE EN LA COLA DE RABBITMQ*/
			loggerService.info(queues);
			
			Gson gson = new Gson();
			
			jsqueue.addProperty("msaServiceSave", "Port5000");
			
			Double totalAmount = jsqueue.get("totalRequestRisk").getAsDouble();
			
			String bussiness = jsqueue.get("transactionType").getAsString();
			
			Identify identify = new Identify();
			
			BigDecimal requestid = BigDecimal.valueOf(Double.valueOf(jsqueue.get("requestId").getAsString()));

			identify.setIdentificationType(jsqueue.get("identificationType").getAsString()); //TIPO DE IDENTIFICACION
			identify.setIdentificationNumber(jsqueue.get("identificationNumber").getAsString()); //NUMERO DE IDENTIFICACION
			
			String MetodoPago = jsqueue.get("paymentMethodType").getAsString();
			
			String serviceNumber = jsqueue.get("serviceNumber").getAsString();
			
			JsonArray blacklistTest = jsqueue.get("creditEngine").getAsJsonArray();
			
			Type listType = new TypeToken<List<CreditEngine>>(){}.getType();
			
			List<CreditEngine> arrayDeJson = gson.fromJson(blacklistTest, listType);
			
			String messageBlackList= denyBlackList.validateCreditEngine(arrayDeJson);
			
			loggerService.info("bussiness: " + bussiness);

			/// declaracion de bandera para el envio de la colas a rabbit	
			boolean sendqueue = false;
			/// boolean createQuota=false;
			/////////////////////////////////////////////////////////////			
			Cr_myreglas responseMotorCredito = new Cr_myreglas();
			CreditLevelResponse response = new CreditLevelResponse();
			List<CreditLevel> listNivelCred = new ArrayList<CreditLevel>();
			List<Cr_procesos_nivel_crediticio> procesosNivel = cachemanager.QueryCreditlevel(bussiness);
			if (0 < procesosNivel.size()) {
				Request ce = gson.fromJson(queues, Request.class);
				responseMotorCredito = validationMotorcredito.validar(ce);
				try {
					JsonArray jsLis = jsqueue.get("approvals").getAsJsonArray();
					Type type = new TypeToken<List<CreditLevel>>() {
					}.getType();
					listNivelCred = gson.fromJson(jsLis.toString(), type);
				} catch (Exception e) {
					loggerService.warn("status : warm, procedure : multiqueue, class : "
							+ Port5000Service.class.getName() + " line : 135");
				}
			}
			for (Cr_procesos_nivel_crediticio procesos : procesosNivel) {
				loggerService.info(procesos.getProcesos());
				creditlevel = new CreditLevel();
				if (procesos.getProcesos().equals("CUPOPRECALIFICADO")
						&& util.validarIngreso(procesos.getProcesos(), listNivelCred)) {
					creditlevel.setTypelevel(procesos.getProcesos());
					creditlevel.setStartDateApproval(new Date());
					
					
						if (jsqueue.has("quota")&&!jsqueue.get("quota").isJsonNull()) {
	                       quota = new Gson().fromJson(jsqueue.get("quota").getAsJsonObject(),Quota.class);							
								} else {
						loggerService.info("no existe Quota");
						quota.setQuota("0");}
						
						if (jsqueue.has("levelRisk")&&!jsqueue.get("levelRisk").isJsonNull()) {
							levelRisk = jsqueue.get("levelRisk").getAsString();
								  }else {
									  	levelRisk = "ALTO";
									  	loggerService.warn("------ NO TIENE LEVELRISK VALOR POR DEFECTO - LEVELRISK(ALTO) ------");
						}
					
					Result respuest = prequalifiedquota.QuotaEvaluation(quota,levelRisk, responseMotorCredito, bussiness,
							procesos.getProcesos(), procesos.getId_nivel_crediticio(), serviceNumber, totalAmount);
					
					try {
						if (respuest.getCupo() < 0) {

							quota.setQuota("0.0");
						} else {
							quota.setQuota(String.valueOf(respuest.getCupo()));	
						}
						String jsonQuota = gson.toJson(quota);
						JsonObject object = gson.fromJson(queues, JsonObject.class);
						JsonObject quotajson = gson.fromJson(jsonQuota, JsonObject.class);
						object.add("quota", quotajson);
						object.addProperty("levelRisk", respuest.getRiesgoCupo());
						queues = object.toString();
					} catch (Exception e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
					if (respuest.getRespcrm().equals("APROBADO")&&quota.getQuotaState().equalsIgnoreCase("A")) {
						System.out.println("Aprobado");
						response.setRequestId(jsqueue.get("requestId").getAsBigDecimal());
						response.setCode("0");
						response.setDelayActivation("N");
						response.setDepositAmount("0");
						response.setMessageDescription("Aprobado por cupo precalificado ");
						sendqueue = true;

						creditlevel.setRequestId(requestid);
						creditlevel.setEntry("S");
						creditlevel.setCode(response.getCode());
						creditlevel.setDescriptionApproval(response.getMessageDescription());
						creditlevel.setIdRuler(respuest.getIdregla());
						creditlevel.setEndDateApproval(new Date());
						listNivelCred.add(creditlevel);
						break;

					} else if (respuest.getRespcrm().equals("NEGADO")) {
						System.out.println("NEGADO");
						response.setRequestId(jsqueue.get("requestId").getAsBigDecimal());
						response.setCode("-1");
						response.setDelayActivation("N");
						response.setDepositAmount("0");
						response.setMessageDescription("Negado por cupo precalificado - cupo es menor al riesgo solicitado");
						sendqueue = true;
						
						creditlevel.setRequestId(requestid);
						creditlevel.setEntry("S");
						creditlevel.setCode(response.getCode());
						creditlevel.setDescriptionApproval(util.nvl(respuest.getDescripcion(), response.getMessageDescription()));
						creditlevel.setIdRuler(respuest.getIdregla());
						creditlevel.setEndDateApproval(new Date());

						listNivelCred.add(creditlevel);
						break;			
				} else if (!quota.getQuotaState().equalsIgnoreCase("A")) {
					System.out.println("NEGADO");
					response.setRequestId(jsqueue.get("requestId").getAsBigDecimal());
					response.setCode("-1");
					response.setDelayActivation("N");
					response.setDepositAmount("0");
					response.setMessageDescription("Negado debido a que el estado del cupo no es activo");
					sendqueue = true;
					
					creditlevel.setRequestId(requestid);
					creditlevel.setEntry("S");
					creditlevel.setCode(response.getCode());
					creditlevel.setDescriptionApproval(util.nvl(respuest.getDescripcion(), response.getMessageDescription()));
					creditlevel.setIdRuler(respuest.getIdregla());
					creditlevel.setEndDateApproval(new Date());

					listNivelCred.add(creditlevel);
					break;			
			}
					}}
			

			if (response.getCode() == null) {
				response = new CreditLevelResponse();
				response.setRequestId(jsqueue.get("requestId").getAsBigDecimal());
				response.setCode("-1");
				response.setDelayActivation("N");
				response.setDepositAmount("0");
				response.setMessageDescription("No ingreso a ningun nivel crediticio");
                jsqueue.addProperty("responseCode",Integer.parseInt(response.getCode()));
                jsqueue.addProperty("messageDescription", response.getMessageDescription());
                jsqueue.addProperty("delayActivation", response.getDelayActivation());
                jsqueue.addProperty("depositAmount", response.getDepositAmount());
                queues = jsqueue.toString();
				loggerService.info(response.toString());			
			
						JsonObject jsResponse = new Gson().fromJson(new Gson().toJson(response), JsonObject.class);					
						rabbitqueue.CreditResponseQueue(jsResponse.toString(), "queuePort5000Response");
					
			} else {
				try {

					String gsonCredJsonArray = gson.toJson(listNivelCred);
					
					JsonArray nivelCredJsonArray = gson.fromJson(gsonCredJsonArray, JsonArray.class);
					jsqueue.add("approvals", nivelCredJsonArray);
                    jsqueue.addProperty("responseCode",Integer.parseInt(response.getCode()));
                    jsqueue.addProperty("messageDescription", response.getMessageDescription());
                    jsqueue.addProperty("delayActivation", response.getDelayActivation());
                    jsqueue.addProperty("depositAmount", response.getDepositAmount());
               
					queues = jsqueue.toString();
				} catch (Exception e) {
					loggerService.error("Error: " + e.getMessage());
				}
				
				if (messageBlackList !=null) {
					loggerService.info("Inicio de validacion cuando messageBlackList no es NULL.");
					
					response = new CreditLevelResponse();
					
					if (messageBlackList == "La solicitud ha sido negada por Lista Negra") {
						response.setCode("1");
					} else {
						response.setCode("-1");
					}
					
					response.setRequestId(jsqueue.get("requestId").getAsBigDecimal());
					response.setDelayActivation("N");
					response.setDepositAmount("0");
					response.setMessageDescription(messageBlackList);
                    jsqueue.addProperty("responseCode",Integer.parseInt(response.getCode()));
                    jsqueue.addProperty("messageDescription", response.getMessageDescription());
                    jsqueue.addProperty("delayActivation", response.getDelayActivation());
                    jsqueue.addProperty("depositAmount", response.getDepositAmount());
                    
					creditlevel.setRequestId(requestid);
                    creditlevel.setTypelevel("Validacion Motor Credito");
                    creditlevel.setEntry("S");
                    creditlevel.setCode(response.getCode());
                    creditlevel.setDescriptionApproval(response.getMessageDescription());
                    creditlevel.setEndDateApproval(new Date());
                    listNivelCred.add(creditlevel);
                    final String gsonCredJsonArray = new Gson().toJson((Object)listNivelCred);
                    sendqueue = true;
                    final JsonArray nivelCredJsonArray = gson.fromJson(gsonCredJsonArray, JsonArray.class);
                    jsqueue.add("approvals", (JsonElement)nivelCredJsonArray);
					queues = jsqueue.toString();
					loggerService.info("Validacion Black List"+response.toString());
					loggerService.info(response.toString());
				}
				if (sendqueue) {	
					if ((MetodoPago.equals("BAN") || MetodoPago.equals("CFA") || MetodoPago.equals("TCR")) && response.getCode().equals("0")) {
						
						try {
							 JsonObject jsResponse = new Gson().fromJson(new Gson().toJson(response), JsonObject.class);
							 rabbitqueue.CreditResponseQueue(jsResponse.toString(), "queuePort5000Response");
							 loggerService.info(response.toString());
							 endTime=System.currentTimeMillis()-startTime;
							 loggerService.info(msgProcessEnd+endTime+msgProcessEndMs);
							 TimeUnit.MILLISECONDS.sleep(500);
							 
							 boolean save= parametrosMongoBD.SaveCreditLevelResponse(response);
							 if(save) {
									loggerService.info("Guardado exitoso de la respuesta en Mongo");	 
							 }else {
									loggerService.info("Error al guardar la respuesta en Mongo");}
							 
						} catch (Exception e) {
							loggerService.error("Error:" + e.getMessage());
						}
						
						
						try {
							Double totalRequestRisk = Double.valueOf(totalAmount);
							Double cupo = Double.valueOf(quota.getQuota());
							if (cupo < 0) {
								//cupo = cupo;
								identify.setValue(String.valueOf(cupo));
							}
							
							loggerService.info("El valor de cupo es: " + cupo);
							loggerService.info("El valor de totalRequestRisk es: " + totalRequestRisk);
							
							if ((cupo - totalRequestRisk) < 0) {
								identify.setValue(String.valueOf(cupo));
							} else {
								identify.setValue(String.valueOf(totalRequestRisk));
							}
							
							quota.setQuotaUsed(Float.parseFloat(identify.getValue()));
							jsqueue.get("quota").getAsJsonObject().addProperty("quotaUsed" ,identify.getValue());
							loggerService.info("El valor de quotaUsed es: " + quota.getQuotaUsed());
							
							
							Integer respu =bussinessRest.Reducircupo(identify);
							if (respu == 0) {
								
								loggerService.info("Se reducio el cupo");
								
								String que = gson.toJson(jsqueue);	
								Request port = gson.fromJson(que, Request.class);
								Integer responseCRM = bussinessRest.quotaUpdateCrm(port);
								if (responseCRM == 0) {
									loggerService.info("Se actualizo el cupo en CRM");
								} else {
									loggerService.info("No se actualizo el cupo en CRM");
								}
							} else {
							
								loggerService.info("No se pudo reducir el cupo");
							}
							
							queues = jsqueue.toString();
							
							loggerService.info("Envio a AsyncDataBase: " + queues);
							rabbitqueue.CreditResponseQueue(queues, "queueAsyncDataBase");
							 
						} catch (Exception e) {
							loggerService.error("Error al reducir cupo:" + e.getMessage());
						}
						
					}else {
						JsonObject jsResponse = new Gson().fromJson(new Gson().toJson(response), JsonObject.class);
						 rabbitqueue.CreditResponseQueue(jsResponse.toString(), "queuePort5000Response");
						 loggerService.info(response.toString());
						 endTime=System.currentTimeMillis()-startTime;
						 loggerService.info(msgProcessEnd+endTime+msgProcessEndMs);
						 TimeUnit.MILLISECONDS.sleep(500); 
						 
						 queues = jsqueue.toString();
						 
						 loggerService.info("Envio a AsyncDataBase: " + queues);
						 rabbitqueue.CreditResponseQueue(queues, "queueAsyncDataBase");
						

						
					}
				}
//------------------------------------------------------------------------------------------	
				loggerService.info(jsqueue);
						}
		} catch (Exception e) {
			loggerService.error("Se Ejecuto Erroneamente el MicroServicio de Nivel Crediticio");
			loggerService.error("Causa del Error: " + e.getCause());
			loggerService.error("Mensaje del Error: " + e.getMessage());
		}
		loggerService.info("Fin del MicroServicio de Nivel Crediticio");
		
	}
	
	public void reliable(Request queues) {
		try {

			CreditLevelResponse response = new CreditLevelResponse();
			
			response.setRequestId(queues.getRequestId());
			response.setCode("-1");
			response.setDelayActivation("N");
			response.setDepositAmount("0");
			response.setMessageDescription("Problemas con el Micro Servicio de Port5000");
			JsonObject jsResponse = new Gson().fromJson(new Gson().toJson(response), JsonObject.class);
			rabbitqueue.CreditResponseQueue(jsResponse.toString(), "queuePort5000Response");
		} catch (Exception e) {
			loggerService.error("Error en reliable: " + e.getMessage());
		}

	}
	

}
