package com.conecel.thirdClient.service;

import java.io.IOException;
import java.util.List;
import java.util.UUID;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;

import javax.xml.parsers.ParserConfigurationException;

import org.apache.logging.log4j.ThreadContext;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.xml.sax.SAXException;

import com.conecel.thirdClient.entity.BlackList;
import com.conecel.thirdClient.entity.CreditRequest;
import com.conecel.thirdClient.entity.CuentaTerceroResponse;
import com.conecel.thirdClient.entity.Debt;
import com.conecel.thirdClient.entity.InformationThirdClients;
import com.conecel.thirdClient.entity.ResultThirdClients;

import lombok.extern.log4j.Log4j2;

@Log4j2
@Service
public class ThirdClientService {
	// static final log log = LogManager.getlog(ThirdClientService.class.getName());

	@Autowired
	QueryDebtInvoice queryDebtInvoice;

	@Autowired
	BlackListInvoice blackListInvoice;

	@Autowired
	LockInvoice lockInvoice;

	@Value("${BanderaLegado}")
	private String sBanderaLegado;

	@Value("${MensajeConsumoApiExitoso}")
	private String sMensajeConsumoApiExitoso;

	@Value("${MensajeConsumoApiDeuda}")
	private String sMensajeConsumoApiDeuda;

	@Value("${MensajeConsumoApiBlackList}")
	private String sMensajeConsumoApiBlackList;

	@Value("${MensajeConsumoApiNull}")
	private String sMensajeConsumoApiNull;

	@Value("${TimeOutApi}")
	private String sTimeOutApi;

	public CuentaTerceroResponse queueThirdClient(CreditRequest creditRequest)
			throws SAXException, IOException, ParserConfigurationException {

		String sThreadID = UUID.randomUUID().toString();
		ThreadContext.put("sid", sThreadID);

		log.info("------------------------------------------------------------");
		log.info("Inicio de consumo del servicio por: /thirdClient/mainService");

		CuentaTerceroResponse ctrResponseFinal = new CuentaTerceroResponse();
		ResultThirdClients rtrResultApi = new ResultThirdClients();
		InformationThirdClients itrResponseInformation = new InformationThirdClients();

		long lStartTime;
		long lEndTime;
		long lServiceTime;

		Boolean bDeuda = false;
		Boolean bListaNegra = false;

		lStartTime = System.currentTimeMillis();

		if (creditRequest.getPaymentPersonIdNumber() == null || creditRequest.getPaymentPersonIdType() == null) {
			log.info("No llega informacion necesaria para cuenta de tercero.");

			itrResponseInformation.setResponseCode("-1");
			itrResponseInformation.setResponseMessage(sMensajeConsumoApiNull);

			ctrResponseFinal.setInformation(itrResponseInformation);

			log.info("Response del servicio de Cuentas Terceros: " + ctrResponseFinal);
			log.info("Fin de consumo del servicio por: /thirdClient/mainService");

			lEndTime = System.currentTimeMillis() - lStartTime;
			log.info("Solicitud procesada en : " + lEndTime + " milisegundos.");

			return ctrResponseFinal;
		}

		itrResponseInformation.setResponseCode("2");

		Future<List<Debt>> flDeuda = queryDebtInvoice.queryBalanceHw(creditRequest.getPaymentPersonIdNumber(),
				creditRequest.getPaymentPersonIdType(), sBanderaLegado, sThreadID);

		// VALIDAR LISTA NEGRA
		Future<BlackList> flListaNegra = blackListInvoice.validateBlackList(creditRequest.getPaymentPersonIdNumber(),
				creditRequest.getPaymentPersonIdType(), sThreadID);

		lServiceTime = System.currentTimeMillis();

		while (true) {
			if (!bDeuda) {
				if (((System.currentTimeMillis() - lServiceTime) > Integer.parseInt(sTimeOutApi))) {
					bDeuda = true;

					flDeuda.cancel(true);

					log.info(
							"Se demoro en responder mas de 2 segundos el API de DEUDA, se cancela la espera de respuesta de esta api.");

					if (itrResponseInformation.getResponseCode().equals("0")) {
						itrResponseInformation.setResponseMessage(sMensajeConsumoApiBlackList);
					}

					if (itrResponseInformation.getResponseCode().equals("-1")) {
						itrResponseInformation.setResponseMessage(sMensajeConsumoApiNull);
					}

					if (itrResponseInformation.getResponseCode().equals("2")) {
						itrResponseInformation.setResponseCode("-1");
						itrResponseInformation.setResponseMessage(sMensajeConsumoApiNull);
					}
				} else {
					if (flDeuda.isDone()) {
						try {
							rtrResultApi.setDebts(flDeuda.get());

							System.out.println("DEUDA **************************: " + rtrResultApi);

							bDeuda = true;

							if (itrResponseInformation.getResponseCode().equals("0")) {
								itrResponseInformation.setResponseMessage(sMensajeConsumoApiExitoso);
							}

							if (itrResponseInformation.getResponseCode().equals("-1")) {
								itrResponseInformation.setResponseCode("0");
								itrResponseInformation.setResponseMessage(sMensajeConsumoApiDeuda);
							}

							if (itrResponseInformation.getResponseCode().equals("2")) {
								itrResponseInformation.setResponseCode("0");
								itrResponseInformation.setResponseMessage(sMensajeConsumoApiDeuda);
							}
						} catch (ExecutionException ex) {
							log.error("Error de ejecucion al esperar que responda el API de DEUDA: " + ex.getMessage());
						} catch (InterruptedException ex) {
							log.error("Error de interrupcion al esperar que responda el API de DEUDA: "
									+ ex.getMessage());
							 Thread.currentThread().interrupt();
						}
					}
				}
			}

			if (!bListaNegra) {
				if (((System.currentTimeMillis() - lServiceTime) > Integer.parseInt(sTimeOutApi))) {
					bListaNegra = true;

					log.info(
							"Se demoro en responder mas de 2 segundos el API de Lista Negra, se cancela la espera de respuesta de esta api.");

					flListaNegra.cancel(true);

					if (itrResponseInformation.getResponseCode().equals("0")) {
						itrResponseInformation.setResponseMessage(sMensajeConsumoApiDeuda);
					}

					if (itrResponseInformation.getResponseCode().equals("-1")) {
						itrResponseInformation.setResponseMessage(sMensajeConsumoApiNull);
					}

					if (itrResponseInformation.getResponseCode().equals("2")) {
						itrResponseInformation.setResponseCode("-1");
						itrResponseInformation.setResponseMessage(sMensajeConsumoApiNull);
					}
				} else {
					if (flListaNegra.isDone()) {
						try {
							rtrResultApi.setBlackList(flListaNegra.get());

							System.out.println("BlackList **************************: " + rtrResultApi);

							bListaNegra = true;

							if (itrResponseInformation.getResponseCode().equals("0")) {
								itrResponseInformation.setResponseMessage(sMensajeConsumoApiExitoso);
							}

							if (itrResponseInformation.getResponseCode().equals("-1")) {
								itrResponseInformation.setResponseCode("0");
								itrResponseInformation.setResponseMessage(sMensajeConsumoApiBlackList);
							}

							if (itrResponseInformation.getResponseCode().equals("2")) {
								itrResponseInformation.setResponseCode("0");
								itrResponseInformation.setResponseMessage(sMensajeConsumoApiBlackList);
							}
						} catch (ExecutionException ex) {
							log.error("Error de ejecucion al esperar que responda el API de Lista Negra: "
									+ ex.getMessage());
						} catch (InterruptedException ex) {
							log.error("Error de interrupcion al esperar que responda el API de Lista Negra: "
									+ ex.getMessage());
							 Thread.currentThread().interrupt();
						}
					}
				}
			}

			if ((bDeuda == true) && (bListaNegra == true)) {
				break;
			}

			System.out.println("Continue doing something else. ");

			try {
				Thread.sleep(300);
			} catch (InterruptedException ex) {
				// TODO Auto-generated catch block
				log.error("Error al esperar SLEEP: " + ex.getMessage());
				 Thread.currentThread().interrupt();
			}
		}

		// VALIDAR BLOQUEOS
		rtrResultApi.setLocks((lockInvoice.validateLocks(rtrResultApi)));

		ctrResponseFinal.setResult(rtrResultApi);
		ctrResponseFinal.setInformation(itrResponseInformation);

		log.info("Response del servicio de Cuentas Terceros: " + ctrResponseFinal);
		log.info("Fin de consumo del servicio por: /thirdClient/mainService");

		lEndTime = System.currentTimeMillis() - lStartTime;
		log.info("Solicitud procesada en : " + lEndTime + " milisegundos.");

		return ctrResponseFinal;

	}
}
