package com.conecel.creditrecharge.service.business;


import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.josql.Query;
import org.josql.QueryResults;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.conecel.creditrecharge.bean.BussinesSoap;
import com.conecel.creditrecharge.bean.ParametersApp;
import com.conecel.creditrecharge.entity.BuroResponse;
import com.conecel.creditrecharge.entity.Cr_myreglas;
import com.conecel.creditrecharge.entity.Result;
import com.conecel.creditrecharge.entity.Rules;
import com.conecel.creditrecharge.entity.SoapTipoRequerimiento;

import com.conecel.creditrecharge.repository.ParametrosMongoBD;
@Service
public class BuroCredito {
	private static final Log Burolog = LogFactory.getLog(BuroCredito.class);

	@Autowired
	private ParametrosMongoBD soaprepository;
	
	@Autowired
	private CacheRedis cacheRedis;
	

	public BuroResponse QueryBuroSoap(String parametrosWS) {
		SoapTipoRequerimiento request= new SoapTipoRequerimiento();
		BuroResponse response= new BuroResponse();

		try {
			BussinesSoap querysoap= new BussinesSoap();
			
			request= soaprepository.consultXml("BUROCREDITO");

			ParametersApp cadenaParametros = new ParametersApp(parametrosWS);
			
			String requestWS = cadenaParametros.reemplazarParametros(request.getRequestpattern());
			Burolog.debug(" WS: "+requestWS);
			
			String resposeWS =querysoap.QueryBuro(requestWS, request.getRequesturl());
			System.out.println(resposeWS);
			String error=cadenaParametros.obtenerValorTag(resposeWS,"WS_ERROR"); 
			if(error.toUpperCase().equals("FALSE")) {
				response.setNumeroTransaccion(cadenaParametros.obtenerValorTag(resposeWS,"PN_NUMEROTRANSACCION")); 
				//response.setNumeroTransaccion(cadenaParametros.obtenerValorTag(resposeWS,"COD_COMANDO")); 

				
				response.setMensaje(cadenaParametros.obtenerValorTag(resposeWS,"MENSAJE"));
				response.setCodError(cadenaParametros.obtenerValorTag(resposeWS,"COD_ERROR"));
			}else {
				
				response.setMensaje(cadenaParametros.obtenerValorTag(resposeWS,"WS_MENSAJE_ERROR"));
				response.setCodError("-1");
				
			}
		}catch(Exception e) {
			Burolog.error("Error al consumir el soap de Buro:"+e.getMessage());
			e.printStackTrace();
		}
		return response;
	}
	
	
	public  Result BuroEvaluation(Cr_myreglas responseMotorCredito,
			 					  String bussiness,
			 					  String procesos,
			 					  int id_nivelCrediticio,
			 					  double riesgototalmensual,
			 					  double riesgoSolicitado,
			 					  double montoMaxEndedamiento) {
		 
		Burolog.info("Inicio ejecucion de reglas de Banco en Linea");
				
			Result result= new Result();
		try {
			
			
			
			
			responseMotorCredito.setMME(montoMaxEndedamiento);
			responseMotorCredito.setRIESGOMENSUAL(riesgototalmensual);
			responseMotorCredito.setBURO(0);
			Collection<Rules> rules = cacheRedis.consultareglas(bussiness, id_nivelCrediticio);
			String lspatch=Cr_myreglas.class.getName();
			System.out.println(responseMotorCredito.toString());
			for (Rules reglas : rules) {
				boolean exito = false;
				System.out.println(reglas.getExpresion_sql());

				String sql = reglas.getExpresion_sql();
				String sqltmp = sql.replaceAll("DUAL", lspatch);

				Burolog.info("Regla :#"+reglas.getId_regla()+" - "+sqltmp);
				

				try {

					
					List<Cr_myreglas> listareglas= new ArrayList<Cr_myreglas>();
					
					listareglas.add(responseMotorCredito);
					Query q = new Query();
					q.parse(sqltmp);
					QueryResults qr = q.execute(listareglas);
					List res = qr.getResults();
					for (int i = 0; i < res.size (); i++)
					{
						 List r = (List) res.get (i);

						    System.out.println ("NIVELCREDITICIO: " + r.get (0));
						    System.out.println ("CRM: " + r.get(1));
						    result=new Result();
						    result.setMotorcredito(r.get(0).toString());
						     result.setRespcrm(r.get(1).toString());
						    result.setIdregla(reglas.getId_regla());

							exito = true;
							
					}
					
				}catch(Exception e) {
					Burolog.info("Error al ejecutar Regla :#"+reglas.getId_regla()+" - "+sql);
					Burolog.error(e.getMessage());
				}
			
				if (exito) {	
					break;
				}
			}
			if(result.getRespcrm()==null) {
				result.setMotorcredito("NEGADO");
				result.setRespcrm("NEXT");
				result.setEstatus("N");
			}
			
			
			
			Burolog.info("Fin ejecucion de regla Banco en linea");

			
			
		}catch(Exception e) {
			Burolog.info("Error:"+e.getMessage());
			e.printStackTrace();
		}
		
		
		return result;
	}

}
